// Code generated by paramgen. DO NOT EDIT.
// Source: github.com/ConduitIO/conduit-commons/tree/main/paramgen

package activemq

import (
	"github.com/conduitio/conduit-commons/config"
)

const (
	SourceConfigConsumerWindowSize    = "consumerWindowSize"
	SourceConfigDestination           = "destination"
	SourceConfigPassword              = "password"
	SourceConfigRecvTimeoutHeartbeat  = "recvTimeoutHeartbeat"
	SourceConfigSendTimeoutHeartbeat  = "sendTimeoutHeartbeat"
	SourceConfigSubscriptionType      = "subscriptionType"
	SourceConfigTlsCaCertPath         = "tls.caCertPath"
	SourceConfigTlsClientCertPath     = "tls.clientCertPath"
	SourceConfigTlsClientKeyPath      = "tls.clientKeyPath"
	SourceConfigTlsEnabled            = "tls.enabled"
	SourceConfigTlsInsecureSkipVerify = "tls.insecureSkipVerify"
	SourceConfigUrl                   = "url"
	SourceConfigUser                  = "user"
)

func (SourceConfig) Parameters() map[string]config.Parameter {
	return map[string]config.Parameter{
		SourceConfigConsumerWindowSize: {
			Default:     "-1",
			Description: "ConsumerWindowSize is the size of the consumer window.\nIt maps to the \"consumer-window-size\" header in the STOMP SUBSCRIBE frame.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		SourceConfigDestination: {
			Default:     "",
			Description: "Destination is the name of the STOMP destination.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		SourceConfigPassword: {
			Default:     "",
			Description: "Password is the password to use when connecting to the broker.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		SourceConfigRecvTimeoutHeartbeat: {
			Default:     "2s",
			Description: "RecvTimeoutHeartbeat specifies the minimum amount of time between the\nclient expecting to receive heartbeat notifications from the server",
			Type:        config.ParameterTypeDuration,
			Validations: []config.Validation{},
		},
		SourceConfigSendTimeoutHeartbeat: {
			Default:     "2s",
			Description: "SendTimeoutHeartbeat specifies the maximum amount of time between the\nclient sending heartbeat notifications from the server",
			Type:        config.ParameterTypeDuration,
			Validations: []config.Validation{},
		},
		SourceConfigSubscriptionType: {
			Default:     "ANYCAST",
			Description: "SubscriptionType is the subscription type. It can be either\nANYCAST or MULTICAST, with ANYCAST being the default.\nMaps to the \"subscription-type\" header in the STOMP SUBSCRIBE frame.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		SourceConfigTlsCaCertPath: {
			Default:     "",
			Description: "CaCertPath is the path to the CA certificate file.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		SourceConfigTlsClientCertPath: {
			Default:     "",
			Description: "ClientCertPath is the path to the client certificate file.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		SourceConfigTlsClientKeyPath: {
			Default:     "",
			Description: "ClientKeyPath is the path to the client key file.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		SourceConfigTlsEnabled: {
			Default:     "false",
			Description: "Enabled is a flag to enable or disable TLS.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		SourceConfigTlsInsecureSkipVerify: {
			Default:     "false",
			Description: "InsecureSkipVerify is a flag to disable server certificate verification.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		SourceConfigUrl: {
			Default:     "",
			Description: "URL is the URL of the ActiveMQ Artemis broker.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		SourceConfigUser: {
			Default:     "",
			Description: "User is the username to use when connecting to the broker.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
	}
}
